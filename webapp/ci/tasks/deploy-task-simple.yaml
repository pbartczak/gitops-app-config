---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-simple
  namespace: webapp-pipelines
spec:
  params:
    - name: enviroment
    - name: argoAppName
    - name: configGitUrl
    - name: appImage
    - name: buildRevision
    - name: appVersion
    - name: gitBaseImage
      default: docker.io/alpine/git:v2.26.2
    - name: argocdImage
      default: quay.io/argoproj/argocd:v2.6.11
  workspaces:
    - name: config-source
  #      mountPath: /home/git
  stepTemplate:
    env:
      - name: HOME
        value: /tekton/home
    envFrom:
      - secretRef:
          name: argocd-env-secret
      - configMapRef:
          name: argocd-env-configmap

  steps:
    - name: git-checkout
      image: "$(params.gitBaseImage)"
      workingDir: "$(workspaces.config-source.path)"
      script: |
        #!/usr/bin/env sh
        set -eu

        git init
        git remote add origin $(params.configGitUrl)
        git fetch --depth 1 origin main
        git checkout main

    - name: update-yaml
      image: "$(params.gitBaseImage)"
      workingDir: "$(workspaces.config-source.path)"
      script: |
        #!/usr/bin/env sh
        set -eux

        cd webapp/cd/overlays/$(params.enviroment)

        echo "updating $(params.enviroment) to revision $(params.appVersion)"
        sed -i "s#$(params.appImage):[a-zA-Z0-9.\-]*#$(params.appImage):$(params.appVersion)#" kustomization.yaml

    - name: commit-push-gitops
      image: "$(params.gitBaseImage)"
      workingDir: "$(workspaces.config-source.path)"
      script: |
        #!/usr/bin/env sh
        set -eu

        cd webapp/cd/overlays/$(params.enviroment)

        git config --global user.email "tekton@tekton.dev"
        git config --global user.name "Tekton Pipeline"
        git config --global --add safe.directory '*'

        git add kustomization.yaml
        git commit --allow-empty -m "[tekton] updating $(params.enviroment) image to $(params.appVersion)"

        git push origin main

    - name: wait-for-argocd-rollout
      image: "$(params.argocdImage)"
      script: |
        #!/usr/bin/env sh
        set -eu

        argocd app sync $(params.argoAppName) --insecure
        argocd app wait $(params.argoAppName) --health --insecure
